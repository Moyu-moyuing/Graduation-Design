{"remainingRequest":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\wuhanligong-java\\music\\vue-admin-template-master\\src\\views\\scene\\Player\\Player.vue?vue&type=style&index=0&id=31b90162&lang=scss&scoped=true&","dependencies":[{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\src\\views\\scene\\Player\\Player.vue","mtime":1652630565850},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouQ29udHJvbHsKCiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogODBweDsKICBiYWNrZ3JvdW5kOiAjZmJmYmZiOwogIGJvcmRlcjogMnB4IHNvbGlkICNmZmY7CiAgcGFkZGluZzogMjBweCAzMHB4OwogIGJveC1zaGFkb3c6IC0xMHB4IC0xMHB4IDE1cHggI2ZmZiwKICAgICAgICAgICAgICAxMHB4IDEwcHggMTVweCByZ2JhKDAsIDAsIDAsIDAuMSksCiAgICAgICAgICAgICAgaW5zZXQgLTVweCAtNXB4IDE1cHggI2ZmZiwKICAgICAgICAgICAgICBpbnNldCA1cHggNXB4IDE1cHggcmdiYSgwLDAsMCwwLjEpOwogIC5CdXR0b25zewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICB3aWR0aDogMTAwJTsKICB9CiAgLkJ1dHRvbnMgc3BhbnsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHdpZHRoOiA0MHB4OwogICAgaGVpZ2h0OiA0MHB4OwogICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgYmFja2dyb3VuZDogI2ZmZmZmZjsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBjb2xvcjogIzc3Nzc3NzsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTVweCA1cHggcmdiYSgwLDAsMCwwLjEpLAogICAgICAgICAgICAgICAgMCA1cHggMTBweCByZ2JhKDAsMCwwLDAuMSksCiAgICAgICAgICAgICAgICAwIDEwcHggMTVweCByZ2JhKDAsMCwwLDAuMSk7CiAgfQogIAoKCn0K"},{"version":3,"sources":["Player.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA","file":"Player.vue","sourceRoot":"src/views/scene/Player","sourcesContent":["<template>\n  <div class=\"AudioViewPlayer\" >\n      <div class=\"Control\">\n        <div class=\"Buttons\">\n          <span class=\"Play-Pause\">\n            <svg-icon v-if=\"isPlaying\" icon-class=\"pause\"></svg-icon>\n            <svg-icon v-else icon-class=\"play\"></svg-icon>\n          </span>\n          <span class=\"File\">\n            <svg-icon  icon-class=\"file\"></svg-icon>\n          </span>\n        </div>\n<!--          <button @click=\"play\" class=\"Play\">播放</button>-->\n<!--          <button @click=\"pause\" class=\"Pause\">暂停</button>-->\n<!--          <input id=\"MP3File\" @change=\"LoaderFile\" type=\"file\" class=\"Select\"/>-->\n<!--&lt;!&ndash;          <el-progress :percentage=\"playedPercentage\" :show-text=false></el-progress>&ndash;&gt;-->\n<!--          <el-slider v-model=\"playedPercentage\" :show-tooltip=\"false\"></el-slider>-->\n      </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n    name:'AudioPlayer',\n    data() {\n        return {\n            musicBuffer:null,\n            //缓冲数据\n            isLoading:false,\n            //判断是否加载音乐\n            isPlaying:false,\n            //是否正在播放音乐\n            fileName:'',\n            //音乐名\n            playedTime:0,\n            //播放时间\n            audioCtx:null,\n            //音频上下文\n            audioBufferSourceNode:null,\n            //音频节点\n            fileReader:null,\n            //文件读取\n            analyser:null,\n            //分析器\n            fileDuration:0,\n            //音乐时长\n            timer:0,\n          //playedPercentage: 0\n            //playedPercentage:0\n          //playedPercentage:0\n\n        }\n    },\n    computed:{\n        playedPercentage:{\n            get(){\n                if(this.fileDuration>0){\n                    return this.playedTime*100/this.fileDuration;\n\n                }else{\n                    return 0;\n                }\n            },\n            set(percentage){\n                this.playedTime=percentage*this.fileDuration/100;\n            }\n        }\n    },\n   watch:{\n        isPlaying:{\n            handler(){\n                this.$bus.$emit('PlayState',this.isPlaying);\n            },\n            deep:true,\n            immediate:true\n        }\n    },\n    mounted() {\n        this.initContext();\n\n\n    },\n    methods: {\n        initContext(){\n            const AudioContext = window.AudioContext || window.webkitAudioContext;\n            this.audioCtx=new AudioContext();\n            //创建上下文\n\n            //创建缓冲节点\n           this.analyser=this.audioCtx.createAnalyser();\n        },\n        play(){\n            if(!this.isLoading){\n                alert('未加载媒体');\n            }else{\n                if(!this.isPlaying){\n                   //只有每次播放时才建立，因为start只能一次\n                  this.audioBufferSourceNode=this.audioCtx.createBufferSource();\n                    //一开始进行初始化\n                this.audioBufferSourceNode.buffer=this.musicBuffer;\n                //播放时才去加载数据\n                this.audioBufferSourceNode.connect(this.audioCtx.destination);\n                //连接\n                this.audioBufferSourceNode.connect(this.analyser);\n                //连接分析器\n                this.audioBufferSourceNode.start(this.playedTime,this.playedTime);\n                //播放\n\n\n                this.isPlaying=true;\n                this.timer=setInterval(()=>{\n                    if(this.playedTime<this.fileDuration){\n                        this.playedTime+=0.1;\n                    }\n                    else{\n                        this.playedTime=0;\n                        //this.isPlaying=false;\n                        clearInterval(this.timer);\n\n                    }\n                },100);\n                //实时更新进度条，每100毫秒即0.1秒更新一次，\n                }\n\n            }\n\n\n        },\n        pause(){\n            if(!this.isLoading){\n                alert('未加载媒体');\n            }\n            else{\n                if(this.isPlaying){\n                this.audioBufferSourceNode.stop();\n                this.audioBufferSourceNode.disconnect();\n                 this.isPlaying=false;\n                clearInterval(this.timer);\n                }\n\n\n            }\n\n        },\n        LoaderFile(e){\n            let file=e.target.files[0];\n            this.fileName=file.name;\n            this.filereader=new FileReader();\n            this.filereader.readAsArrayBuffer(file);\n            this.filereader.onload=(event)=>{\n            this.audioCtx.decodeAudioData(event.target.result,(buffer)=>{\n                this.musicBuffer=buffer;\n                //先存音频数据\n                this.isLoading=true;\n                this.fileDuration=buffer.duration;\n\n                this.AnalyserData();\n            })\n            //音频数据\n            }\n        },\n        AnalyserData(){\n            this.analyser.fftSize=512;\n            //512是最合适的值\n            // let bufferLength=analyser.frequencyBinCount;\n            // let dataArray=new Uint8Array(bufferLength);\n            // this.analyser.getByteFrequencyData(dataArray);\n            this.$bus.$emit('BindingAnalyser',this.analyser);\n        }\n\n    },\n}\n</script>\n\n<style lang='scss' scoped>\n.Control{\n\n  position: relative;\n  width: 100%;\n  height: 80px;\n  background: #fbfbfb;\n  border: 2px solid #fff;\n  padding: 20px 30px;\n  box-shadow: -10px -10px 15px #fff,\n              10px 10px 15px rgba(0, 0, 0, 0.1),\n              inset -5px -5px 15px #fff,\n              inset 5px 5px 15px rgba(0,0,0,0.1);\n  .Buttons{\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n  }\n  .Buttons span{\n    position: relative;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #777777;\n    cursor: pointer;\n    box-shadow: inset 0 -5px 5px rgba(0,0,0,0.1),\n                0 5px 10px rgba(0,0,0,0.1),\n                0 10px 15px rgba(0,0,0,0.1);\n  }\n  \n\n\n}\n</style>\n"]}]}