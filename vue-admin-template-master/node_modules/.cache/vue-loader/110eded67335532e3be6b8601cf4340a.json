{"remainingRequest":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\wuhanligong-java\\music\\vue-admin-template-master\\src\\views\\Editor\\Attribute\\structure\\index.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\src\\views\\Editor\\Attribute\\structure\\index.vue","mtime":1652284978912},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\wuhanligong-java\\music\\vue-admin-template-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWNoZWNrYm94X19pbnB1dC5pcy1jaGVja2VkIC5lbC1jaGVja2JveF9faW5uZXIsIC5lbC1jaGVja2JveF9faW5wdXQuaXMtaW5kZXRlcm1pbmF0ZQouZWwtY2hlY2tib3hfX2lubmVyewogICAgYmFja2dyb3VuZC1jb2xvcjp2aW9sZXQ7CiAgICBib3JkZXItY29sb3I6dmlvbGV0Owp9Ci5lbC1jaGVja2JveF9faW5wdXQuaXMtY2hlY2tlZCArIC5lbC1jaGVja2JveF9fbGFiZWwgewogICAgY29sb3I6IHZpb2xldDsKfQouZWwtY2hlY2tib3guaXMtYm9yZGVyZWQuaXMtY2hlY2tlZHsKICAgIGJvcmRlci1jb2xvcjogdmlvbGV0Owp9Ci5lbC1jaGVja2JveF9faW5wdXQuaXMtZm9jdXMgLmVsLWNoZWNrYm94X19pbm5lcnsKICAgIGJvcmRlci1jb2xvcjogIHZpb2xldDsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/Editor/Attribute/structure","sourcesContent":["<template>\n    <div class=\"structure\">\n        <el-scrollbar class=\"Scrollbar\">\n        <el-tree ref=\"ElTree\" :data=\"sceneStructure\" default-expand-all :highlight-current=\"true\" node-key=\"uuid\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"\n        :current-node-key=\"current\">\n            <template #default=\"{ data }\">\n                <span class=\"el-tree-node__label\" :id=\"data.uuid\">{{ data.name }}</span>\n            </template>\n        </el-tree>\n        <div class=\"object\" >\n            <div class=\"Panel\" >\n                <div class=\"Row\">\n                    <span class=\"Text\">类型</span>\n                    <span class=\"Text\">{{Object3D.type}}</span>\n                </div>\n                <div class=\"Row\">\n                    <span class=\"Text\">识别码</span>\n                    <input class=\"UUIDInput\" autocomplete=\"off\" disabled=\"\" v-model=\"Object3D.uuid\">\n                    <!-- <button class=\"Button\" style=\"margin-left: 7px;\">更新</button> -->\n                </div>\n                <div class=\"Row\">\n                    <span class=\"Text\">名称</span>\n                    <input class=\"NameInput\" autocomplete=\"off\" v-model=\"Object3D.name\" @change=\"RefreshNodeName\">\n                </div>\n                <div class=\"Row\">\n                    <span class=\"Text\" >位置</span>\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"Object3D.position.x\">\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"Object3D.position.y\">\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"Object3D.position.z\">\n                </div>\n                <div class=\"Row\">\n                    <span class=\"Text\" >旋转</span>\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"RotationX\">\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"RotationY\">\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"RotationZ\">\n                </div>\n                <div class=\"Row\">\n                    <span class=\"Text\" >缩放</span>\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"Object3D.scale.x\">\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"Object3D.scale.y\">\n                    <input class=\"Number\" autocomplete=\"off\" v-model=\"Object3D.scale.z\">\n                </div>\n                <div class=\"Row\">\n                    <span class=\"Text\" >可见性</span>\n                    <el-checkbox v-model=\"Object3D.visible\"></el-checkbox>\n                </div>\n                 <div class=\"Row\">\n                    <span class=\"Text\" >颜色</span>\n                    <div class=\"block\">\n                       <el-color-picker v-model=\"color\" ></el-color-picker>\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n        </el-scrollbar>\n    </div>\n\n</template>\n\n<script>\n /* 需要添加几个方法和需求：\n 1、改变颜色 √\n 2、改变欧拉角变化 √\n 3、改变名称，场景树也改变 √\n 4、根据模型不同显示的编辑也不同 0\n 5、设置方法 √\n 6、撤销与反撤销\n 7、保存与导入\n 8、音频可视化已写好的模型\n 9、根据文件选择可视化\n 10、防止刷新\n 11、帮助 √\n 12、组对象控制\n 13、helper的tree刷新问题\n 14、首页\n 15、文件区（是否需要数据库？）\n 16、历史记录？\n  */\nimport * as THREE from 'three/build/three.module.js'\nimport GetUUID from '../../../../lib/Getuuid';\nimport { Group, Object3D, Vector3 } from '../../../../lib/three.module';\nexport default {\n\n    name:'structure',\n    mounted() {\n        this.RefreshSceneTree();//刷新生效\n        this.GetObject();\n        this.GetSceneObject();\n\n    },\n    computed:{\n        RotationX:{\n            get(){\n                return THREE.Math.radToDeg(this.Object3D.rotation.x);\n            },\n            set(X){\n                this.Object3D.rotateX(THREE.Math.degToRad(X));\n            }\n        },\n        RotationY:{\n            get(){\n                return THREE.Math.radToDeg(this.Object3D.rotation.y);\n            },\n             set(Y){\n                this.Object3D.rotateY(THREE.Math.degToRad(Y));\n            }\n        },\n        RotationZ:{\n            get(){\n                return THREE.Math.radToDeg(this.Object3D.rotation.z);\n            },\n             set(Z){\n                this.Object3D.rotateZ(THREE.Math.degToRad(Z));\n            }\n        },\n        color:{\n            get(){\n                if(this.Object3D.hasOwnProperty('isTrans')){\n                    return this.Object3D.color;\n                }\n                else{\n                    if(this.Object3D.name.indexOf('音频线')!=-1){\n                        return '#'+this.Object3D.children[0].material.color.getHexString();\n                    }else if(this.Object3D.name.indexOf('音频谱')!=-1){\n                         return '#'+this.Object3D.children[0].children[0].material.color.getHexString();\n                    }\n                    else{\n                         if(this.Object3D.material){\n                //如果材质存在\n                return '#'+this.Object3D.material.color.getHexString();\n\n                }else{\n                //有些对象直接可以获取color或者是从控制面板传入的对象\n                     return '#'+this.Object3D.color.getHexString();\n                }\n                    }\n\n                }\n\n            },\n            set(newcolor){\n                if(this.Object3D.name.indexOf('音频线')!=-1||this.Object3D.name.indexOf('音频谱')!=-1){\n                     this.Object3D.traverse(function(child) {\n                    if (child.isLine)\n                        child.material = new THREE.LineBasicMaterial({\n                         color: newcolor\n                        });\n                        // if(child.isMesh){\n                        //     child.material = new THREE.MeshPhongMaterial({\n                        //     color: newcolor\n                        //     });\n                        // }\n                        //说明是barGroup\n                        if(child.type=='Group'){\n                            child.children[0].material = new THREE.MeshPhongMaterial({\n                            color: newcolor\n                            });\n                        }\n                    });\n                }\n                else{\n                    if(this.Object3D.material){\n                 this.Object3D.material.color.set(newcolor);\n            }else if(this.Object3D.type.indexOf(\"Light\")!=-1){\n                //说明是光\n                this.Object3D.color.set(newcolor);\n            }\n                }\n\n            }\n        }\n    },\n    watch:{\n        //监听当前current变化\n        current(uuid){\n            if(uuid){\n                this.$refs.ElTree.setCurrentKey(uuid);\n            }\n            else{\n                this.$refs.ElTree.setCurrentKey(null);\n            }\n\n        }\n    },\n    methods: {\n        // getScene(){\n        //     console.log(this.$parent.$parent.$parent.getScene());\n        // }\n        // ObjectTranslate(SceneObject){\n\n        //      let Object3D={\n        //         name:SceneObject.name,\n        //         uuid:SceneObject.uuid,\n        //         type:SceneObject.type,\n        //         position:SceneObject.position,\n        //         //欧拉角\n        //         rotation:new THREE.Vector3(THREE.Math.radToDeg(SceneObject.rotation.x),THREE.Math.radToDeg(SceneObject.rotation.y),THREE.Math.radToDeg(SceneObject.rotation.z)),\n        //         scale:SceneObject.scale,\n        //         visible:SceneObject.visible,\n        //         color:'#000000',\n        //         isTrans:true//判断选取对象方法传入的对象是否是原生three对象\n\n        //     };\n        //     if(SceneObject.material){\n        //         //如果材质存在\n        //         Object3D.color='#'+SceneObject.material.color.getHexString();\n\n        //     }else{\n        //         //有些对象直接可以获取color或者是从控制面板传入的对象\n        //         Object3D.color='#'+SceneObject.color.getHexString();\n        //     }\n        //     return Object3D;\n\n\n        // },\n        // selectObjChange(color){\n        //     if(this.Object3D.material){\n        //          this.Object3D.material.color.set(color);\n        //     }else if(this.Object3D.light){\n        //         this.Object3D.color.set(color);\n        //     }\n\n        // },\n        // getChildren(obj){\n        //     if(!obj.children.children){\n        //         return obj;\n        //     }else{\n        //         while(obj.children){\n        //             obj=obj.children;\n        //         }\n        //         return obj;\n        //     }\n        // },\n        initObject(){\n             let Object3D={\n                name:'',\n                uuid:'',\n                type:'',\n                position:new THREE.Vector3(),\n                //欧拉角\n                rotation:new THREE.Euler(),\n                scale:new THREE.Vector3(),\n                visible:true,\n                color:'#111111',\n                isTrans:true\n            };\n            return Object3D;\n        },\n        ObjectTo3D(){\n\n        },\n        GetObject(){\n            this.$bus.$on('getEvent',(object)=>{\n                //选中物体触发点击事件\n               this.handleNodeClick(object);\n\n\n            });\n        },\n        GetSceneObject(){\n            this.$bus.$on('responseObj',(object)=>{\n                if(object.type.indexOf(\"Mesh\")!=-1||object.type.indexOf(\"Group\")!=-1){\n                    //说明是材质物体\n                    this.Object3D=object;\n                }\n                else if(object.type.indexOf(\"Light\")!=-1){\n                    //说明是光\n                    this.Object3D=object;\n                    console.log(this.Object3D);\n                }\n                else if(object.type.indexOf(\"Helper\")!=-1){\n                    //说明是辅助工具\n                    this.Object3D=this.initObject();\n                }\n\n\n\n            });\n        },\n        refreshNodeByuuid(list){\n            //遍历场景树结构更改名称\n            list.map(c=>{\n                if(c.uuid&&c.uuid==this.Object3D.uuid){\n                    c.name=this.Object3D.name;\n                    return;\n                }\n               else{\n\n                if(c.children&&c.children.length>0){\n                    this.refreshNodeByuuid(c.children);\n                }\n             }\n            })\n        },\n        RefreshNodeName(){\n            this.refreshNodeByuuid(this.sceneStructure);\n        },\n        RefreshSceneTree(){\n            //每次场景结构改变刷新场景树\n                this.$bus.$on('sceneChanged',(scenelist)=>{\n               let sceneTree=[];\n               let lightTree=[];\n               let helperTree=[];\n               this.createSceneStructure(scenelist,sceneTree,lightTree,helperTree);\n                this.sceneStructure[0].children=sceneTree;\n                this.sceneStructure[2].children=lightTree;\n                this.sceneStructure[3].children=helperTree;\n\n            });\n        },\n        createSceneStructure(scenelist,sceneTree,lightTree,helperTree){\n            scenelist.map(c=>{\n\n                let data={\n                    name:c.name,\n                    type:c.type,\n                    uuid:c.uuid\n                };\n                if(c.children&&c.children.length>0){\n                    data.children=[];\n                    this.createSceneStructure(c.children,data.children,data.children,data.children);\n                }\n                if(c.type.indexOf(\"Mesh\")!=-1||c.type.indexOf(\"Group\")!=-1||c.type.indexOf(\"Object3D\")!=-1){\n                    //说明是材质物体\n                    if(c.parent.name!=\"音频线\"&&c.parent.name!=\"音频谱\"){\n                        sceneTree.push(data);\n                    }\n\n                }\n                else if(c.type.indexOf(\"Light\")!=-1){\n                    //说明是光\n                    lightTree.push(data);\n                }\n                else if(c.type.indexOf(\"Helper\")!=-1){\n                    //说明是辅助工具\n                    helperTree.push(data);\n                }\n\n            })\n        },\n        // findObject(){\n        //     this.$bus.$on('emitObject',(object)=>{\n        //         if(object==null){\n        //             this.Object3D=this.initObject();\n        //         }\n        //             else{\n        //                 this.Object3D=object;\n        //                 }\n        //         });\n        // },\n         handleNodeClick(target) {\n\n             if(target!=null&&target.type.indexOf('Camera')==-1&&target.hasOwnProperty('uuid')){\n                 //对象不为空：点击场景空白地方\n                 //相机不能进行操作\n                 //树基本结构标签点击不触发\n                 this.current=target.uuid;\n                 if(!target.hasOwnProperty('isTrans')&&target.hasOwnProperty('visible')){\n                     //说明是场景中拿到的对象\n                     this.Object3D=target;\n                 }\n                 else{\n                     //说明是从点击场景树进行的选择物体，需要到editor中拿当前对象\n                     //触发一系列查询并修改object事件\n                     this.$bus.$emit('requestObj',target);\n                     console.log(target)\n\n                 }\n             }\n            else{\n                this.current='';\n                this.Object3D=this.initObject();\n            }\n            this.$bus.$emit('checkEvent',target);\n        // if (target.uuid && target.uuid !== this.current.uuid) {\n        //     this.current = target;\n        //      //console.log(this.current.uuid);\n        //     // console.log(target.uuid)\n\n        // }\n        // if(target.uuid){\n        //     this.$refs.ElTree.setCurrentKey(target.uuid)\n        // }\n\n    }\n    },\n   data() {\n       return {\n            current:'',\n            checked:true,\n            Object3D:{\n                name:'',\n                uuid:'',\n                type:'',\n                position:new THREE.Vector3(),\n                //欧拉角\n                rotation:new THREE.Euler(),\n                scale:new THREE.Vector3(),\n                visible:true,\n                color:'#111111',\n                isTrans:true\n            },\n            defaultProps:{\n\n                children: 'children',\n                label: 'name'\n            },\n            sceneStructure: [\n                { name: '场景', type: 'base', children: [] },\n                { name: '摄像机', type: 'cameraGroup', children: [\n                    {\n                        name: '透视相机',\n                        type:'perspectiveCamera',\n                        children:[]\n                    }\n                ] },\n                { name: '光源', type: 'lightGroup', children: [] },\n                {name: '辅助工具',type: 'helper',children:[]}\n            ],\n       }\n   },\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.structure {\n    height:530px;\n    width: 100%;\n     overflow-y : auto;\n    background: #281928;\n    ::v-deep .el-tree {\n        background: unset;\n        border-bottom: 4px solid #432d43;\n        .el-tree-node {\n            .el-tree-node__content {\n                background: unset;\n                &:hover {\n                    background: #ffa7fb;\n                }\n                .el-tree-node__label {\n                    color: white;\n                    font-size: 10px;\n                }\n            }\n            .el-tree-node__children {\n                background: #281928;\n            }\n        }\n        .is-current {\n            > .el-tree-node__content {\n                background: violet !important;\n            }\n        }\n    }\n    .object{\n        .Panel{\n            border-top: 0px;\n            padding-top: 20px;\n            display: block;\n            border-bottom: 4px solid #432d43;\n            .Row{\n                    display: flex;\n                    align-items: center;\n                    min-height: 24px;\n                    margin-bottom: 10px;\n                .UUIDInput{\n                    padding: 2px;\n                    border: 1px solid transparent;\n                    border-radius: 30px;\n                     color: violet!important;\n                    width: 150px;\n                    font-size: 12px;\n                }\n                .NameInput{\n                    padding: 2px;\n                    border: 1px solid transparent;\n                    width: 150px;\n                    border-radius: 30px;\n                    font-size: 12px;\n                }\n                .Number{\n                    cursor: ns-resize;\n                    background-color: transparent;\n                    width: 50px;\n                    color: violet!important;\n                    border-radius: 30px;\n                    font-size: 10px;\n                }\n                .Text{\n                    cursor: default;\n                    display: inline-block;\n                    text-indent:20px;\n                    width: 90px;\n                    color: white;\n                    font-size: 10px;\n                }\n            }\n\n        }\n\n    }\n}\n</style>\n<style lang=\"scss\">\n    .el-checkbox__input.is-checked .el-checkbox__inner, .el-checkbox__input.is-indeterminate\n    .el-checkbox__inner{\n        background-color:violet;\n        border-color:violet;\n    }\n    .el-checkbox__input.is-checked + .el-checkbox__label {\n        color: violet;\n    }\n    .el-checkbox.is-bordered.is-checked{\n        border-color: violet;\n    }\n    .el-checkbox__input.is-focus .el-checkbox__inner{\n        border-color:  violet;\n    }\n</style>\n"]}]}